{"ast":null,"code":"var _jsxFileName = \"/Users/steutama/Documents/Documents/team19/react_app/src/components/AdminPage/OrderTable.js\";\n// import React from \"react\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import Paper from \"@material-ui/core/Paper\";\n// import Table from \"@material-ui/core/Table\";\n// import TableBody from \"@material-ui/core/TableBody\";\n// import TableCell from \"@material-ui/core/TableCell\";\n// import TableHead from \"@material-ui/core/TableHead\";\n// import TablePagination from \"@material-ui/core/TablePagination\";\n// import TableRow from \"@material-ui/core/TableRow\";\n// const columns = [\n//   { id: \"id\", label: \"ID\", minWidth: 170, format: value => value.toLocaleString()},\n//   { id: \"name\", label: \"Name\", minWidth: 170},\n//   {\n//     id: \"quantity\",\n//     label: \"Quantity\",\n//     align: \"right\",\n//     minWidth: 100,\n//     format: value => value.toLocaleString()\n//   },\n//   {\n//     id: \"price\",\n//     label: \"Price\",\n//     minWidth: 100,\n//     align: \"right\",\n//     format: value => value.toLocaleString()\n//   },\n// ];\n// function createData(name, code, population, size) {\n//   const density = population / size;\n//   return { name, code, population, size, density };\n// }\n// class OrderTable extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       page: 0,\n//       rowsPerPage: 5,\n//       userData: []\n//     };\n//   }\n//   handleChangePage = (event, newPage) => {\n//     this.setState({\n//       page: newPage\n//     })\n//   };\n//   handleChangeRowsPerPage = event => {\n//     this.setState({\n//       page: 0,\n//       rowsPerPage: +event.target.value\n//     })\n//   };\n//   component(){\n//     fetch(\"http://localhost:3001/api/orders/\", {\n//       method: \"GET\",\n//       credentials: \"include\",\n//       headers: {\n//         // userId: this.props.userId use this when fixed\n//         userId: \"c9f3527c-0c02-4f1a-8e6f-6bed2c133c6e\" // temporary hard code\n//       }\n//     })\n//       .then(response => {\n//         let allItems = []\n//         for (let i = 0; i < response.length; i++){\n//           allItems.concat(response[i].items)\n//         }\n//       });\n//   }\n//   render() {\n//     return (\n//       <Paper\n//         className={{\n//           width: \"100%\"\n//         }}\n//       >\n//         <div\n//           className={{\n//             maxHeight: 440,\n//             overflow: \"auto\"\n//           }}\n//         >\n//           <Table stickyHeader aria-label=\"sticky table\">\n//             <TableHead>\n//               <TableRow>\n//                 {columns.map(column => (\n//                   <TableCell\n//                     key={column.id}\n//                     align={column.align}\n//                     style={{ minWidth: column.minWidth }}\n//                   >\n//                     {column.label}\n//                   </TableCell>\n//                 ))}\n//               </TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {this.fetchAllItems()\n//                 .slice(this.state.page * this.state.rowsPerPage, this.state.page * this.state.rowsPerPage + this.state.rowsPerPage)\n//                 .map(row => {\n//                   return (\n//                     <TableRow\n//                       hover\n//                       role=\"checkbox\"\n//                       tabIndex={-1}\n//                       key={row.id}\n//                     >\n//                       {columns.map(column => {\n//                         const value = row[column.id];\n//                         return (\n//                           <TableCell key={column.id} align={column.align}>\n//                             {column.format && typeof value === \"number\"\n//                               ? column.format(value)\n//                               : value}\n//                           </TableCell>\n//                         );\n//                       })}\n//                     </TableRow>\n//                   );\n//                 })}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 15]}\n//           component=\"div\"\n//           count={this.state.data.length}\n//           rowsPerPage={this.state.rowsPerPage}\n//           page={this.state.page}\n//           onChangePage={this.handleChangePage}\n//           onChangeRowsPerPage={this.handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//     );\n//   }\n// }\n// export default OrderTable;\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MaterialTable from \"material-table\";\n\nclass OrderTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n  }\n\n  componentWillMount() {\n    fetch(\"http://localhost:3001/api/orders/\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        // userId: this.props.userId use this when fixed\n        userId: \"c9f3527c-0c02-4f1a-8e6f-6bed2c133c6e\" // temporary hard code\n\n      }\n    }).then(response => response.json()).then(json => {\n      let allItems = [];\n\n      for (let i = 0; i < json.length; i++) {\n        allItems = allItems.concat(json[i].items);\n      }\n\n      const parsedAllItems = [];\n\n      for (let i = 0; i < allItems.length; i++) {\n        const itemData = {\n          id: allItems[i].itemId,\n          name: \"Utama\",\n          quantity: allItems[i].quantity,\n          price: 69\n        };\n        parsedAllItems.push(itemData);\n      }\n\n      this.setState({\n        items: parsedAllItems\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        maxWidth: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(MaterialTable, {\n      columns: [{\n        title: \"ID\",\n        field: \"id\"\n      }, {\n        title: \"Name\",\n        field: \"name\"\n      }, {\n        title: \"Quantity\",\n        field: \"quantity\",\n        type: \"numeric\"\n      }, {\n        title: \"Price\",\n        field: \"price\",\n        type: \"numeric\"\n      }],\n      data: this.state.items,\n      title: \"Items This User Bought\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default OrderTable;","map":{"version":3,"sources":["/Users/steutama/Documents/Documents/team19/react_app/src/components/AdminPage/OrderTable.js"],"names":["React","Component","ReactDOM","MaterialTable","OrderTable","constructor","props","state","items","componentWillMount","fetch","method","credentials","headers","userId","then","response","json","allItems","i","length","concat","parsedAllItems","itemData","id","itemId","name","quantity","price","push","setState","render","maxWidth","title","field","type"],"mappingsgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;;AAEA,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AACjCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnBC,IAAAA,KAAK,CAAC,mCAAD,EAAsC;AACzCC,MAAAA,MAAM,EAAE,KADiC;AAEzCC,MAAAA,WAAW,EAAE,SAF4B;AAGzCC,MAAAA,OAAO,EAAE;AACP;AACAC,QAAAA,MAAM,EAAE,sCAFD,CAEwC;;AAFxC;AAHgC,KAAtC,CAAL,CAQGC,IARH,CAQQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARpB,EASGF,IATH,CASQE,IAAI,IAAI;AACZ,UAAIC,QAAQ,GAAG,EAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCD,QAAAA,QAAQ,GAAGA,QAAQ,CAACG,MAAT,CAAgBJ,IAAI,CAACE,CAAD,CAAJ,CAAQX,KAAxB,CAAX;AACD;;AACD,YAAMc,cAAc,GAAG,EAAvB;;AACA,WAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,cAAMI,QAAQ,GAAG;AACfC,UAAAA,EAAE,EAAEN,QAAQ,CAACC,CAAD,CAAR,CAAYM,MADD;AAEfC,UAAAA,IAAI,EAAE,OAFS;AAGfC,UAAAA,QAAQ,EAAET,QAAQ,CAACC,CAAD,CAAR,CAAYQ,QAHP;AAIfC,UAAAA,KAAK,EAAE;AAJQ,SAAjB;AAMAN,QAAAA,cAAc,CAACO,IAAf,CAAoBN,QAApB;AACD;;AACD,WAAKO,QAAL,CAAc;AACZtB,QAAAA,KAAK,EAAEc;AADK,OAAd;AAGD,KA3BH;AA4BD;;AAEDS,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AACE,MAAA,OAAO,EAAE,CACP;AAAEC,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OADO,EAEP;AAAED,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,KAAK,EAAE;AAAxB,OAFO,EAGP;AAAED,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,KAAK,EAAE,UAA5B;AAAwCC,QAAAA,IAAI,EAAE;AAA9C,OAHO,EAIP;AAAEF,QAAAA,KAAK,EAAE,OAAT;AAAkBC,QAAAA,KAAK,EAAE,OAAzB;AAAkCC,QAAAA,IAAI,EAAE;AAAxC,OAJO,CADX;AAOE,MAAA,IAAI,EAAE,KAAK5B,KAAL,CAAWC,KAPnB;AAQE,MAAA,KAAK,EAAC,wBARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAcD;;AAtDgC;;AAyDnC,eAAeJ,UAAf","sourcesContent":["// import React from \"react\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import Paper from \"@material-ui/core/Paper\";\n// import Table from \"@material-ui/core/Table\";\n// import TableBody from \"@material-ui/core/TableBody\";\n// import TableCell from \"@material-ui/core/TableCell\";\n// import TableHead from \"@material-ui/core/TableHead\";\n// import TablePagination from \"@material-ui/core/TablePagination\";\n// import TableRow from \"@material-ui/core/TableRow\";\n\n// const columns = [\n//   { id: \"id\", label: \"ID\", minWidth: 170, format: value => value.toLocaleString()},\n//   { id: \"name\", label: \"Name\", minWidth: 170},\n//   {\n//     id: \"quantity\",\n//     label: \"Quantity\",\n//     align: \"right\",\n//     minWidth: 100,\n//     format: value => value.toLocaleString()\n//   },\n//   {\n//     id: \"price\",\n//     label: \"Price\",\n//     minWidth: 100,\n//     align: \"right\",\n//     format: value => value.toLocaleString()\n//   },\n// ];\n\n// function createData(name, code, population, size) {\n//   const density = population / size;\n//   return { name, code, population, size, density };\n// }\n\n// class OrderTable extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       page: 0,\n//       rowsPerPage: 5,\n//       userData: []\n//     };\n//   }\n\n//   handleChangePage = (event, newPage) => {\n//     this.setState({\n//       page: newPage\n//     })\n//   };\n\n//   handleChangeRowsPerPage = event => {\n//     this.setState({\n//       page: 0,\n//       rowsPerPage: +event.target.value\n//     })\n//   };\n\n//   component(){\n//     fetch(\"http://localhost:3001/api/orders/\", {\n//       method: \"GET\",\n//       credentials: \"include\",\n//       headers: {\n//         // userId: this.props.userId use this when fixed\n//         userId: \"c9f3527c-0c02-4f1a-8e6f-6bed2c133c6e\" // temporary hard code\n//       }\n//     })\n//       .then(response => {\n//         let allItems = []\n//         for (let i = 0; i < response.length; i++){\n//           allItems.concat(response[i].items)\n//         }\n//       });\n//   }\n\n//   render() {\n//     return (\n//       <Paper\n//         className={{\n//           width: \"100%\"\n//         }}\n//       >\n//         <div\n//           className={{\n//             maxHeight: 440,\n//             overflow: \"auto\"\n//           }}\n//         >\n//           <Table stickyHeader aria-label=\"sticky table\">\n//             <TableHead>\n//               <TableRow>\n//                 {columns.map(column => (\n//                   <TableCell\n//                     key={column.id}\n//                     align={column.align}\n//                     style={{ minWidth: column.minWidth }}\n//                   >\n//                     {column.label}\n//                   </TableCell>\n//                 ))}\n//               </TableRow>\n//             </TableHead>\n//             <TableBody>\n//               {this.fetchAllItems()\n//                 .slice(this.state.page * this.state.rowsPerPage, this.state.page * this.state.rowsPerPage + this.state.rowsPerPage)\n//                 .map(row => {\n//                   return (\n//                     <TableRow\n//                       hover\n//                       role=\"checkbox\"\n//                       tabIndex={-1}\n//                       key={row.id}\n//                     >\n//                       {columns.map(column => {\n//                         const value = row[column.id];\n//                         return (\n//                           <TableCell key={column.id} align={column.align}>\n//                             {column.format && typeof value === \"number\"\n//                               ? column.format(value)\n//                               : value}\n//                           </TableCell>\n//                         );\n//                       })}\n//                     </TableRow>\n//                   );\n//                 })}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 15]}\n//           component=\"div\"\n//           count={this.state.data.length}\n//           rowsPerPage={this.state.rowsPerPage}\n//           page={this.state.page}\n//           onChangePage={this.handleChangePage}\n//           onChangeRowsPerPage={this.handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//     );\n//   }\n// }\n// export default OrderTable;\n\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MaterialTable from \"material-table\";\n\nclass OrderTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n  }\n\n  componentWillMount() {\n    fetch(\"http://localhost:3001/api/orders/\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        // userId: this.props.userId use this when fixed\n        userId: \"c9f3527c-0c02-4f1a-8e6f-6bed2c133c6e\" // temporary hard code\n      }\n    })\n      .then(response => response.json())\n      .then(json => {\n        let allItems = [];\n        for (let i = 0; i < json.length; i++) {\n          allItems = allItems.concat(json[i].items);\n        }\n        const parsedAllItems = [];\n        for (let i = 0; i < allItems.length; i++) {\n          const itemData = {\n            id: allItems[i].itemId,\n            name: \"Utama\",\n            quantity: allItems[i].quantity,\n            price: 69\n          };\n          parsedAllItems.push(itemData);\n        }\n        this.setState({\n          items: parsedAllItems\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div style={{ maxWidth: \"100%\" }}>\n        <MaterialTable\n          columns={[\n            { title: \"ID\", field: \"id\" },\n            { title: \"Name\", field: \"name\" },\n            { title: \"Quantity\", field: \"quantity\", type: \"numeric\" },\n            { title: \"Price\", field: \"price\", type: \"numeric\" }\n          ]}\n          data={this.state.items}\n          title=\"Items This User Bought\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default OrderTable;\n"]},"metadata":{},"sourceType":"module"}